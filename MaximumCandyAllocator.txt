Problem Statemnt: 
Given an array of n integers -costs ,representing the costs of n ice creams. Determine the MAXIMUM NUMBER OF CANDIES that can be bought if you are allowed to 
spent ATMOST max_coins.

Approach 1: Dynamic Programming - 0/1 Knap-Sack
Let dp[i][j] = maximum number of candies that can be bought till j + 1th index for max_coins = i
Overlapping Subproblem: 
Choice 1: Include the current ice cream , n1 = 1 + dp[i - costs[j - 1]][j - 1]
Choice 2: Do not include the current ice cream, n2 = 0 + dp[i][j - 1]

dp[i][j] = max(n1, n2)

Algo: (costs, max_coins)
dp[0..max_coins][1....n]
for i in range [1, max_coins] do: 
  for j in range[1, n] do: 
    n1 = 0 + dp[i][j - 1]
    if(i >= costs[j - 1])
      n2 = 1 + dp[i - costs[j - 1]][j - 1]
    
    dp[i][j] = max(n1, n2)
  end for
end for


return dp[max_coisn][n]



Appraoch 2: Greedy 
Logic: Allocate least cost candies first.

Algo: (costs, max_coins)
sort(costs in increasing order of values)
count = 0
n = len(costs)
for i in range [0, n) and max_coins > 0 do: 
  if(max_coins >= costs[i]))
    count = count + 1
    
  max_coins = max_coins - costs[i]
end for



return count
